{"prompt": "Write a function cumulative_mul that mutates the Tree t so that each node's label becomes the product of its label and all labels in the subtrees rooted at the node.", "completion": "def cumulative_mul(t):\n    for b in t.branches:\n        cumulative_mul(b)\n    total = t.label\n    for b in t.branches:\n        total *= b.label\n    t.label = total\n"}
{"prompt": "Complete the function prune_small that takes in a Tree t and a number n and prunes t mutatively. If t or any of its branches have more than n branches, the n branches with the smallest labels should be kept and any other branches should be pruned, or removed, from the tree.", "completion": "def prune_small(t, n):\n    while len(t.branches) > n:\n        largest = max(t.branches, key=lambda x: x.label)\n        t.branches.remove(largest)\n    for b in t.branches:\n        prune_small(b, n)\n"}
{"prompt": "Implement delete, which takes a Tree t and deletes any occurrence of x within it. The order of the branches must be preserved.", "completion": "def delete(t, x):\n    new_branches = []\n    for b in t.branches:\n        delete(b, x)\n        if b.label != x:\n            new_branches.append(b)\n    t.branches = new_branches\n"}
{"prompt": "Write a function sum_nums that receives a linked list s and returns the sum of its elements. You may assume the elements of s are all integers. Try to implement sum_nums with recursion!", "completion": "def sum_nums(s):\n    if s == Link.empty:\n        return 0\n    return s.first + sum_nums(s.rest)\n"}
{"prompt": "Write a function remove_all that takes a linked list and a value as input. This function mutates the linked list by removing all nodes that store value.\n\nYou may assume the first element of the linked list is not equal to value. You should mutate the input linked list; remove_all does not return anything.", "completion": "def remove_all(link, value):\n    if link is Link.empty or link.rest is Link.empty:\n        return\n    if link.rest.first == value:\n        link.rest = link.rest.rest\n        remove_all(link, value)\n    else:\n        remove_all(link.rest, value)\n"}
{"prompt": "Write a function remove_all that takes a linked list and a value as input. This function mutates the linked list by removing all nodes that store value.\n\nYou may assume the first element of the linked list is not equal to value. You should mutate the input linked list; remove_all does not return anything.", "completion": "def remove_all(link, value):\n    if link is not Link.empty and link.rest is not Link.empty:\n        remove_all(link.rest, value)\n        if link.rest.first == value:\n            link.rest = link.rest.rest\n"}
{"prompt": "Write a function remove_all that takes a linked list and a value as input. This function mutates the linked list by removing all nodes that store value.\n\nYou may assume the first element of the linked list is not equal to value. You should mutate the input linked list; remove_all does not return anything.", "completion": "def remove_all(link, value):\n    ptr = link\n    while ptr is not Link.empty and ptr.rest is not Link.empty:\n        if ptr.rest.first == value:\n            ptr.rest = ptr.rest.rest\n        else:\n            ptr = ptr.rest\n"}
{"prompt": "Write a recursive function flip_two that receives a linked list s and flips every pair of values in s.", "completion": "def flip_two(s):\n    if s is Link.empty or s.rest is Link.empty:\n        return\n    s.first, s.rest.first = s.rest.first, s.first\n    flip_two(s.rest.rest)\n"}
{"prompt": "Write an iterative function flip_two that receives a linked list s and flips every pair of values in s.", "completion": "def iterative_flip_two(s):\n    while s is not Link.empty and s.rest is not Link.empty:\n        s.first, s.rest.first = s.rest.first, s.first\n        s = s.rest.rest\n"}
{"prompt": "Write a function make_circular that takes in a non-circular, non-empty linked list s and mutates s so that it becomes circular.", "completion": "def make_circular(s):\n    last = s\n    while last.rest is not Link.empty:\n        last = last.rest\n    last.rest = s\n"}